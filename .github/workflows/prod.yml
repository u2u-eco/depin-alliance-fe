# This workflow will build and push a new container image to Amazon ECR
#
# To use this workflow, you will need to complete the following set-up steps:

name: Release
on:
  release:
    types: [ published ]

# This is what will cancel the workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: k8s-prod
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Make envfile
      uses: SpicyPizza/create-envfile@v1.3
      with:
        envkey_NEXT_PUBLIC_BASE_URL: ${{ vars.NEXT_PUBLIC_BASE_URL }}
        envkey_NEXT_PUBLIC_TELE_URI: ${{ vars.NEXT_PUBLIC_TELE_URI }}
        envkey_NEXT_PUBLIC_SHARE_URL: ${{ vars.NEXT_PUBLIC_SHARE_URL }}
        envkey_NEXT_PUBLIC_DEVICE_REGISTER: ${{ vars.NEXT_PUBLIC_DEVICE_REGISTER }}
        

        directory: .
        file_name: .env
        fail_on_empty: false

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        cp .env .prod.env
        cp .prod.env .env.production

        SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`
  
        echo "Build a docker container and push it to ECR" 
        echo "Image: $ECR_REGISTRY/${{ vars.U2U_SERVICE_NAME }}:${GITHUB_REF#refs/*/}-$SHORT_SHA"
        docker build --build-arg GIT_COMMIT=$GITHUB_SHA --build-arg GIT_TAG=${GITHUB_REF#refs/*/} --build-arg COMPILED_AT=$(date +'%Y-%m-%dT%H:%M:%S') -f ${{ vars.DOCKERFILE_PATH }} -t $ECR_REGISTRY/${{ vars.U2U_SERVICE_NAME }}:${GITHUB_REF#refs/*/}-$SHORT_SHA .

        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/${{ vars.U2U_SERVICE_NAME }}:${GITHUB_REF#refs/*/}-$SHORT_SHA

  update-image:
    name: update-image
    needs: build
    runs-on: k8s-prod
    environment: production

    steps:
    - uses: actions/checkout@v4
      name: Checkout K8S Deployment Manifest repo
      with:
        repository: ${{ secrets.K8S_MANIFEST_REPO_PROD }}
        token: ${{ secrets.CI_PUSH_TOKEN }}

    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v1
      with:
        kustomize-version: "3.8.8"

    - name: Update Kubernetes resources
      env:
        GITHUB_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      run: |
        git config --global user.email "ci@u2u.com"
        git config --global user.name "DevOps"
        git checkout master

        echo "Update newimage with kustomize"
        SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`

        cd ${{ vars.KUSTOMIZE_PROJECT_PATH }}/production
        kustomize edit set image ${{ secrets.PROD_ECR_REGISTRY }}/${{ vars.U2U_SERVICE_NAME }}:${GITHUB_REF#refs/*/}-$SHORT_SHA
        cat kustomization.yaml
        git commit -am "[${{ github.repository }}] $GITHUB_ACTOR - $GITHUB_COMMIT_MESSAGE" || true
        git push -u origin master

  deploy:
    name: deploy
    needs: update-image
    runs-on: u2u-prod
    environment: production

    steps:
    - name: Sync ArgoCD App
      run: |
        argocd login --insecure ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }}
        argocd --server ${{ secrets.ARGOCD_SERVER }} --insecure app sync ${{ vars.ARGOCD_APP_PRODUCTION }}
